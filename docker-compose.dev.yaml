version: '3'
services:
  web:
    container_name: web
    image: kryptos
    build:
      context: .
      dockerfile: Dockerfile
    ports:
     # - "80:80"
     - "5000:5000"
    volumes:
     - .:/app
     - catalyst:/root/.catalyst #to store exhange data and auth
    environment:
      - FLASK_DEBUG=1
      - FLASK_ENV=docker-dev
      - REDIS_HOST=redis
      - FLASK_APP=autoapp.py
      - DATABASE_URL=postgres://postgres:postgres@db/kryptos
      # - LISTEN_PORT=80
    networks:
      - kryptos-net
    depends_on:
      - redis
      - db
    # Infinite loop, to keep it alive, for debugging
    # command: bash -c "while true; do echo 'sleeping...' && sleep 10; done"\
    command: ['flask', 'run', '--host=0.0.0.0']

  worker:
    image: kryptos
    container_name: worker
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - catalyst:/root/.catalyst
    environment:
      - FLASK_DEBUG=1
    entrypoint: ['python', 'kryptos/worker/worker.py']
    networks:
      - kryptos-net

    depends_on:
    - redis
    - web

  ingester:
    image: kryptos
    container_name: ingester
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - catalyst:/root/.catalyst
    entrypoint: ['python', 'kryptos/worker/ingester.py']
    networks:
      - kryptos-net
    depends_on:
    - worker

  db:
    container_name: db
    image: postgres:10.4-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: 'kryptos'

     # expose port 5433 instead of default
     # in case postgres already on host machine
    ports:
      - "5433:5432"
    networks:
      - kryptos-net

  redis:
    container_name: redis
    image: redis:4.0.5-alpine
    networks:
      - kryptos-net

networks:
  kryptos-net:
      driver: bridge

volumes:
  catalyst:
  postgres_data:
