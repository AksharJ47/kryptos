version: '3'
services:
  web:
    container_name: web
    image: kryptos
    build:
      context: ./app
      dockerfile: Dockerfile
    ports:
     # - "80:80"
     - "5000:5000"
    volumes:
     - ./app/:/app
    environment:
      - FLASK_DEBUG=1
      - FLASK_ENV=docker-dev
      - REDIS_HOST=redis
      - FLASK_APP=autoapp.py
      - DATABASE_URL=postgres://postgres:postgres@db:5432/kryptos
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_BOT=kryptos_dev_bot
      - BASE_URL=${BASE_URL}
      # - LISTEN_PORT=80
    depends_on:
      - redis
      - db
    # Infinite loop, to keep it alive, for debugging
    # command: bash -c "while true; do echo 'sleeping...' && sleep 10; done"\
    command: ['flask', 'run', '--host=0.0.0.0']

  worker:
    image: kryptos
    container_name: worker
    build:
      context: .
      dockerfile: kryptos/Dockerfile
    volumes:
      - ./kryptos:/app
      - catalyst:/root/.catalyst
    environment:
      - FLASK_DEBUG=1
    entrypoint: ['python', 'worker/worker.py']

    depends_on:
    - redis
    - web

  ingester:
    image: kryptos
    container_name: ingester
    build:
      context: .
      dockerfile: kryptos/Dockerfile
    volumes:
      - ./kryptos:/app
      - catalyst:/root/.catalyst
    entrypoint: ['python', 'worker/ingester.py']
    depends_on:
    - worker
    logging:
        driver: none

  db:
    container_name: db
    image: postgres:10.4-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: 'kryptos'
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres


     # expose port 5433 instead of default
     # in case postgres already on host machine
    ports:
      - "5433:5432"

  redis:
    container_name: redis
    image: redis:4.0.5-alpine

  # reverse-proxy:
  #   image: traefik # The official Traefik docker image
  #   command: --api --docker # Enables the web UI and tells Tr√¶fik to listen to docker
  #   ports:
  #     - "80:80"     # The HTTP port
  #     - "8080:8080" # The Web UI (enabled by --api)
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events

volumes:
  catalyst:
  postgres_data:
